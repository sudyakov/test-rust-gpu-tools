var searchIndex = new Map(JSON.parse('[\
["add",{"doc":"","t":"HHH","n":["cuda","main","opencl"],"q":[[0,"add"],[3,"rust_gpu_tools::device"],[4,"rust_gpu_tools::program"]],"d":["Returns a <code>Program</code> that runs on CUDA.","","Returns a <code>Program</code> that runs on OpenCL."],"i":[0,0,0],"f":"{bd}{{}f}1","c":[],"p":[[5,"Device",3],[6,"Program",4],[1,"unit"]],"b":[]}],\
["rust_gpu_tools",{"doc":"Abstraction layer for OpenCL and CUDA.","t":"PPPPFPPFGGPPPPPFPPPPFPGPGPPGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNQNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFKFNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFKFNNNNNNNNNOINNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNN","n":["Amd","Cuda","Cuda","Cuda","Device","DeviceInfoNotAvailable","DeviceNotFound","DeviceUuid","Framework","GPUError","Generic","IO","Intel","InvalidId","KernelNotFound","LocalBuffer","Nvidia","Opencl","Opencl","Opencl3","PciId","PciId","Program","ProgramInfoNotAvailable","UniqueId","UnsupportedVendor","Uuid","Vendor","all","as_c_void","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","by_pci_id","by_unique_id","by_uuid","by_vendor","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","compute_capability","compute_units","cuda","cuda_device","default","default","device_name","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","framework","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","memory","name","new","opencl","opencl_device","program_closures","push","run","shared_mem","source","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unique_id","vendor","Buffer","Device","Kernel","KernelArgument","Program","arg","as_c_void","as_c_void","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","compute_capability","compute_units","create_buffer","create_buffer_from_slice","create_kernel","device_name","eq","fmt","fmt","fmt","fmt","from","from","from","from","from_binary","from_bytes","hash","into","into","into","into","memory","name","pci_id","read_into_buffer","run","run","shared_mem","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","uuid","vendor","write_from_buffer","Buffer","Device","Kernel","KernelArgument","Program","arg","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","builder","cl_device_id","cl_device_id","clone","clone_into","compute_capability","compute_units","create_buffer","create_buffer_from_slice","create_kernel","device_name","eq","fmt","fmt","fmt","from","from","from","from","from_binary","from_opencl","hash","into","into","into","into","memory","name","pci_id","push","push","read_into_buffer","run","run","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","uuid","vendor","write_from_buffer"],"q":[[0,"rust_gpu_tools"],[175,"rust_gpu_tools::cuda"],[238,"rust_gpu_tools::opencl"],[302,"alloc::vec"],[303,"core::ffi"],[304,"core::option"],[305,"core::fmt"],[306,"core::fmt"],[307,"fil_rustacuda::error"],[308,"std::io::error"],[309,"core::hash"],[310,"alloc::string"],[311,"core::result"],[312,"core::convert"],[313,"core::ops::function"],[314,"core::error"],[315,"core::any"],[316,"core::ffi::c_str"]],"d":["GPU by AMD.","CUDA program.","CUDA.","Error from the underlying <code>RustaCUDA</code> library, e.g. a memory …","A device that may have a CUDA and/or OpenCL GPU associated …","Error for OpenCL <code>clGetDeviceInfo()</code> call failures.","Error when a device cannot be found.","A unique identifier based on UUID of the device.","Which framework to use, CUDA or OpenCL.","Error types of this library.","Errors that rarely happen and don’t deserve their own …","Error when standard I/O fails.","GPU by Intel.","Error when the string representation of a unique …","Error when a kernel with the given name cannot be found.","A buffer on the GPU.","GPU by NVIDIA.","OpenCL program.","OpenCL.","Error from the underlying <code>opencl3</code> library, e.g. a memory …","The PCI-ID is the combination of the PCI Bus ID and PCI …","ID based on the PCI bus.","Abstraction for running programs on CUDA or OpenCL.","Error for OpenCL <code>clGetProgramInfo()</code> call failures.","Unique identifier that can either be a PCI ID or a UUID.","Error when the device is from an unsupported vendor.","ID based on a globally unique identifier.","Currently supported vendors of this library.","Returns all available GPUs that are supported.","","","","","","","","","","","","","","","","","","","","Returns the device matching the PCI ID if there is one.","Returns the device matching the unique ID if there is one.","Returns the device matching the UUID if there is one.","Returns the device matching the Vendor.","","","","","","","","","","","","","Returns the major and minor version of the compute …","Returns the number of compute units of the GPU.","The CUDA specific implementation of a <code>Buffer</code>, <code>Device</code>, …","Returns the underlying CUDA device if it is available.","","","Returns the name of the GPU, e.g. “GeForce RTX 3090”.","","","","","","","","","","","","","","","","","","","","Returns the preferred framework (CUDA or OpenCL) to use.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the memory of the GPU in bytes.","Returns the name of the GPU, e.g. “GeForce RTX 3090”.","Returns a new buffer of the specified <code>length</code>.","The OpenCL specific implementation of a <code>Buffer</code>, <code>Device</code>, …","Returns the underlying OpenCL device if it is available.","Creates two closures, one for CUDA, one for OpenCL for the …","","Run some code in the context of the program.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the best possible unique identifier, a UUID is …","Returns the <code>Vendor</code> of the GPU.","A Buffer to be used for sending and receiving data to/from …","CUDA specific device.","A kernel that can be executed.","Abstraction for kernel arguments.","Abstraction that contains everything to run a CUDA kernel …","Set a kernel argument.","Converts into a C void pointer.","","","","","","","","","","","","Returns the major and minor version of compute capability …","Returns the number of compute units of the GPU.","Creates a new buffer that can be used for input/output …","Creates a new buffer on the GPU and initializes with the …","Returns a kernel.","Returns the name of the GPU, e.g. “GeForce RTX 3090”.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a program for a specific device from a compiled …","Creates a program for a specific device from a compiled …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the memory of the GPU in bytes.","Returns the name of the GPU, e.g. “GeForce RTX 3090”.","Returns the PCI-ID of the GPU, see the <code>PciId</code> type for more …","Reads data from the GPU into an existing buffer.","Actually run the kernel.","Run some code in the context of the program.","Returns the shared memory size. This is usally 0, except …","","","","","","","","","","","","","","Returns the PCI-ID of the GPU if available, see the …","Returns the <code>Vendor</code> of the GPU.","Puts data from an existing buffer onto the GPU.","A Buffer to be used for sending and receiving data to/from …","OpenCL specific device.","A kernel that can be executed.","Abstraction for kernel arguments.","Abstraction that contains everything to run an OpenCL …","Set a kernel argument.","","","","","","","","","The underlying kernel builder.","The lowest level identifier of an OpenCL device, it …","Low-level access to the device identifier.","","","Returns the major and minor version of the compute …","Returns the number of compute units of the GPU.","Creates a new buffer that can be used for input/output …","Creates a new buffer on the GPU and initializes with the …","Returns a kernel.","Returns the name of the GPU, e.g. “GeForce RTX 3090”.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a program for a specific device from a compiled …","Creates a program for a specific device from OpenCL source …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the memory of the GPU in bytes.","Returns the name of the GPU, e.g. “GeForce RTX 3090”.","Returns the PCI-ID of the GPU, see the <code>PciId</code> type for more …","Apply the kernel argument to the kernel.","","Reads data from the GPU into an existing buffer.","Run some code in the context of the program.","Actually run the kernel.","","","","","","","","","","","","","","Returns the PCI-ID of the GPU if available, see the …","Returns the <code>Vendor</code> of the GPU.","Puts data from an existing buffer onto the GPU."],"i":[9,15,10,20,0,20,20,0,0,0,20,20,9,20,20,0,9,15,10,20,0,7,0,20,0,20,7,0,1,3,15,5,8,7,9,10,1,20,3,15,5,8,7,9,10,1,20,3,1,1,1,1,5,8,7,9,10,1,5,8,7,9,10,1,1,1,0,1,5,8,15,5,8,7,9,10,1,5,5,8,8,7,7,9,9,10,1,20,20,3,1,15,5,5,8,8,7,9,10,1,20,20,20,20,3,5,8,7,9,10,1,15,5,8,7,9,10,1,20,3,1,1,3,0,1,0,3,15,3,20,5,8,7,9,10,1,5,8,7,9,20,15,5,5,8,8,7,7,9,9,9,10,1,20,3,15,5,8,7,9,10,1,20,3,15,5,8,7,9,10,1,20,3,1,1,0,0,0,0,0,42,43,44,42,44,14,36,42,44,14,36,14,14,14,14,36,36,36,36,14,42,44,14,36,42,44,14,36,36,36,14,42,44,14,36,14,14,14,36,42,36,43,14,42,44,14,36,42,44,14,36,42,44,14,36,14,14,36,0,0,0,0,0,33,39,49,32,33,39,49,32,33,33,0,32,32,32,32,32,39,39,39,39,32,49,32,33,39,49,32,33,39,39,32,39,49,32,33,32,32,32,47,49,39,39,33,32,39,49,32,33,39,49,32,33,39,49,32,33,32,32,39],"f":"````````````````````````````{{}{{d{b}}}}{{{f{c}}}h{}}{ce{}{}}00000000000000000{j{{l{b}}}}{n{{l{b}}}}{A`{{l{b}}}}{Ab{{d{b}}}}{jj}{A`A`}{nn}{AbAb}{AdAd}{bb}{{ce}Af{}{}}00000{b{{l{{Aj{AhAh}}}}}}{bAh}`{b{{l{Al}}}}{{}j}{{}A`}{AnB`}{{jj}Bb}{{A`A`}Bb}{{nn}Bb}{{AbAb}Bb}{{AdAd}Bb}{{bb}Bb}{{jBd}Bf}0{{A`Bd}Bf}0{{nBd}Bf}0{{AbBd}Bf}0{{AdBd}Bf}{{bBd}Bf}{{BhBd}Bf}0{{{f{c}}Bd}BfBj}{bAd}{cc{}}{Blj}1{{{C`{Bn}}}A`}22222{CbBh}{CdBh}{CfBh}55{{jc}AfCh}{{A`c}AfCh}{{nc}AfCh}{{Abc}AfCh}{{Adc}AfCh}{{bc}AfCh}{ce{}{}}00000000{bCj}{bCl}{Cn{{f{c}}}{}}`{b{{l{D`}}}}`{{{f{c}}Db}Af{}}{{An{Aj{ik}}c}{{Dd{eg}}}{}{}{{Df{Bh}}}{{Dl{Dhc}{{Dj{{Dd{eg}}}}}}}{{Dl{Dnc}{{Dj{{Dd{eg}}}}}}}}{{{f{c}}}Ah{}}{Bh{{l{E`}}}}888888{cCl{}}0000{c{{Dd{e}}}{}{}}0{B`{{Dd{jBh}}}}{B`{{Dd{A`Bh}}}}22{B`{{Dd{nBh}}}}{B`{{Dd{AbBh}}}}4{Ah{{Dd{AbBh}}}}5555555555555{cEb{}}00000000{bn}{bAb}`````{{Edc}EdEf}{Efh}{{{Eh{c}}}h{}}{ce{}{}}0000000{AlAl}{{ce}Af{}{}}{Al{{Aj{AhAh}}}}{AlAh}{{DhCn}{{Dd{{Eh{c}}Bh}}}{}}{{Dh{Ej{c}}}{{Dd{{Eh{c}}Bh}}}{}}{{DhB`CnCn}{{Dd{EdBh}}}}{DhB`}{{AlAl}Bb}{{EdBd}Bf}{{{Eh{c}}Bd}BfBj}{{AlBd}Bf}{{DhBd}Bf}{cc{}}000{{AlEl}{{Dd{DhBh}}}}{{Al{Ej{Bn}}}{{Dd{DhBh}}}}{{Alc}AfCh}{ce{}{}}000{AlCj}{AlCl}{Alj}{{Dh{Eh{c}}{Ej{c}}}{{Dd{AfBh}}}{}}{Ed{{Dd{AfBh}}}}{{Dhic}{{Dd{eg}}}{}{}{{Df{Bh}}}{{Dl{Dhc}{{Dj{{Dd{eg}}}}}}}}{EfAh}7{c{{Dd{e}}}{}{}}0000000{cEb{}}000{Al{{l{A`}}}}{AlAb}7`````{{Dbc}DbEn}<<<<<<<<``{D`F`}{D`D`}{{ce}Af{}{}}{D`{{l{{Aj{AhAh}}}}}}{D`Ah}{{DnCn}{{Dd{{Fb{c}}Bh}}}{}}{{Dn{Ej{c}}}{{Dd{{Fb{c}}Bh}}}{}}{{DnB`CnCn}{{Dd{DbBh}}}}{DnB`}{{D`D`}Bb}{{{Fb{c}}Bd}BfBj}{{D`Bd}Bf}{{DbBd}Bf}{cc{}}000{{D`{d{Bn}}}{{Dd{DnBh}}}}{{D`B`}{{Dd{DnBh}}}}{{D`c}AfCh}{ce{}{}}000{D`Cj}{D`Cl}{D`j}{{EnDb}Af}{{{Fb{c}}Db}Af{}}{{Dn{Fb{c}}{Ej{c}}}{{Dd{AfBh}}}{}}{{Dnic}{{Dd{eg}}}{}{}{{Df{Bh}}}{{Dl{Dnc}{{Dj{{Dd{eg}}}}}}}}{Db{{Dd{AfBh}}}}8{c{{Dd{e}}}{}{}}0000000{cEb{}}000{D`{{l{A`}}}}{D`Ab}6","c":[],"p":[[5,"Device",0],[5,"Vec",302],[5,"LocalBuffer",0],[6,"c_void",303],[5,"PciId",0],[6,"Option",304],[6,"UniqueId",0],[5,"DeviceUuid",0],[6,"Vendor",0],[6,"Framework",0],[1,"unit"],[1,"u32"],[1,"tuple"],[5,"Device",175],[6,"Program",0],[1,"str"],[1,"bool"],[5,"Formatter",305],[8,"Result",305],[6,"GPUError",0],[10,"Debug",305],[1,"u16"],[1,"u8"],[1,"array"],[5,"ClError",306],[6,"CudaError",307],[5,"Error",308],[10,"Hasher",309],[1,"u64"],[5,"String",310],[1,"usize"],[5,"Device",238],[5,"Kernel",238],[6,"Result",311],[10,"From",312],[5,"Program",175],[17,"Output"],[10,"FnOnce",313],[5,"Program",238],[10,"Error",314],[5,"TypeId",315],[5,"Kernel",175],[10,"KernelArgument",175],[5,"Buffer",175],[1,"slice"],[5,"CStr",316],[10,"KernelArgument",238],[8,"cl_device_id",238],[5,"Buffer",238]],"b":[[77,"impl-Debug-for-PciId"],[78,"impl-Display-for-PciId"],[79,"impl-Debug-for-DeviceUuid"],[80,"impl-Display-for-DeviceUuid"],[81,"impl-Debug-for-UniqueId"],[82,"impl-Display-for-UniqueId"],[83,"impl-Display-for-Vendor"],[84,"impl-Debug-for-Vendor"],[87,"impl-Debug-for-GPUError"],[88,"impl-Display-for-GPUError"],[100,"impl-From%3CClError%3E-for-GPUError"],[101,"impl-From%3CCudaError%3E-for-GPUError"],[102,"impl-From%3CError%3E-for-GPUError"],[148,"impl-TryFrom%3C%26str%3E-for-Vendor"],[150,"impl-TryFrom%3Cu32%3E-for-Vendor"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
